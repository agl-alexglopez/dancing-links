Put your answers to the debugging questions from Problem One in this file.

Q1: numDisks=5, start='A', finish='C', temp='B'



Q2: The next appearance of solveTowersOfHanoi outside of TowersOfHanoi.cpp is in the file
    TowersOfHanoiGUI.cpp. The function that calls solveTowersOfHanoi is makeTheMagicHappen on line
    392.



Q3: 31



Q4: 15



Q5: The smallest input that triggers the bug is two characters.



Q6: I am very familiar with this error because it is the exact same one that happened to me during
    whatareyoudoing.cpp from assingment 3. If you extend a string during recursion, you will almost
    certainly not get what you were looking for. The incorrect program uses += to add the character
    onto result. What you want is to use + to add the character onto result.
    // before
    ... chosen += ch);
    // after
    ... chosen + ch);



Q7: It is ok to add to containers with the += operator during recursion, in fact, depending on the
    situation it is probably a good fast choice. For example, if you += into a set, as we
    do on line 42 in the program, that's great because we add one value into a set rather than
    use the + operator to create a new set that is the union of the previous set and the value.
    However, for strings, += is saying the following.

    chosen = chosen + ch);

    So I think that this is redefining chosen in the context of each call as itself plus the
    character at index i. So when you are done producing the first word combination, like "hi", the
    function will add the next character it picks to the end of "hi", because the original string
    "hi" is our str parameter. You will end up with a string that is longer than the original.

        // Finish first string combo correctly
        // return result
        // start the loop over
        // "hi" persists as chosen and when we grab "h" from str it's tacked on to the end.
        // however str has returned empty to the base case in our first stack frame so we are done.
        // returns {"hi", "hih"}

    Instead, what we want is to add a new character onto chosen only from what we have remaining of
    the substring. This way we will never end up with a combination that is longer than the number
    of characters present. The problems that come with += are more clear with longer strings. The
    longest string I could enter before what looked like an infinite loop occured was six
    characters. The best analogy I could think of for redifining a string and its length during the
    recursion this function tries to achieve might be altering the container you are looping
    through from within a loop. It can create very unpredictable results.


